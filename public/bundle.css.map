{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../Image.svelte",
    "../Viewer.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let alt;\n  export let data;\n\n  $: sizes =\n    Object.keys(data)\n      .sort((first, second) => {\n        const fw = Number.parseInt(first.split(\"x\")[0], 10);\n        const sw = Number.parseInt(second.split(\"x\")[0], 10);\n        return fw < sw;\n      })\n      .map(size => {\n        const [width, height] = size\n          .split(\"x\")\n          .map(x => Number.parseInt(x, 10));\n        return `(min-width: ${width}px) and (min-height: ${height}px) ${width}px`;\n      })\n      .join(\", \") + \", 600px\";\n\n  $: srcset = Object.entries(data)\n    .map(([size, src]) => {\n      const [width] = size.split(\"x\");\n      return `${src} ${width}w`;\n    })\n    .join(\", \");\n</script>\n\n<style>\n  img {\n    max-height: 100%;\n  }\n</style>\n\n<img {alt} {sizes} {srcset} />\n",
    "<script context=\"module\">\n  if (history.scrollRestoration) {\n    history.scrollRestoration = \"manual\";\n  }\n</script>\n\n<script>\n  import { fade } from \"svelte/transition\";\n\n  import Image from \"./Image.svelte\";\n  export let dataURL;\n\n  let imageData = (async dataURL => {\n    const response = await fetch(dataURL);\n    const data = await response.json();\n\n    // Now we know which links to highjack.\n    for (const t of document.links) {\n      const href = t.getAttribute(\"href\");\n      if (href in data) {\n        t.addEventListener(\"click\", event => {\n          event.preventDefault();\n          if (window.location.hash) {\n            // Navigation from image to image is not preserved in history.\n            history.replaceState({ back: true }, \"\", href);\n          } else {\n            history.pushState({ back: true }, \"\", href);\n          }\n          // These history invocations don't trigger hashchange, so we do here.\n          selected = window.location.hash;\n        });\n      }\n    }\n    return data;\n  })(dataURL);\n\n  let selected = window.location.hash;\n\n  function keydown(event) {\n    if (event.key == \"Escape\") {\n      if (window.location.hash) {\n        if (history.state && history.state.back) {\n          history.back();\n        } else {\n          history.replaceState({ back: true }, \"\", window.location.pathname);\n          selected = \"\";\n        }\n      }\n    }\n\n    // TODO: ArrowLeft + ArrowDown for previous\n    // TODO: ArrowRight + ArrowUp for next\n  }\n\n  // TODO: click listener for click on background\n</script>\n\n<style>\n  div {\n    position: fixed;\n    left: 0;\n    top: 0;\n    background-color: rgba(255, 255, 255, 0.5);\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-wrap: wrap;\n    align-content: center;\n    justify-content: center;\n  }\n</style>\n\n<svelte:window\n  on:hashchange={() => {\n    selected = window.location.hash;\n  }}\n  on:keydown={keydown} />\n\n{#if selected}\n  {#await imageData then data}\n    <div transition:fade>\n      <div class=\"current\">\n        <Image alt={selected} data={data[selected]} />\n      </div>\n    </div>\n  {/await}\n{/if}\n"
  ],
  "names": [],
  "mappings": "AA4BE,GAAG,cAAC,CAAC,AACH,UAAU,CAAE,IAAI,AAClB,CAAC;AC4BD,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,KAAK,CACf,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC1C,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,MAAM,CACrB,eAAe,CAAE,MAAM,AACzB,CAAC"
}